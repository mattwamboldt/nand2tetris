// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        // Heap starts at 2048
        let ram[2048] = 14334; // Remaining free space
        let ram[2049] = 2050; // Next free address
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array base;

        if (size < 1) {
            do Sys.error(5);
        }

        let base = 2048;

        // base[0] = remaining in the block, base[1] next free block
        // After allocation we set remaining to 0 to skip over all allocated blocks
        while (base[0] < size) {
            let base = base[1];
        }

        if ((base + size) > 16379) {
            do Sys.error(6);
        }

        if (base[0] > (size + 2)) {
            let base[size + 2] = (base[0] - size) - 2;
            if (base[1] = (base + 2)) {
                let base[size + 3] = base + size + 4;
            } else {
                // Happens after a block is freed in the middle
                let base[size + 3] = base[1];
            }

            let base[1] = base + size + 2;
        }

        let base[0] = 0;

        return base + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block, next;

        let block = o - 2;
        let next = block[1];
        
        if (next[0] = 0) {
            // Mark the block as having it's space available (free)
            let block[0] = block[1] - block - 2;
        } else {
            // Merge the adjacanet free space into one block
            let block[0] = block[1] - block + next[0];
            if (next[1] = (next + 2)) {
                let block[1] = block + 2;
            } else {
                let block[1] = next[1];
            }
        }

        return;
    }    
}
